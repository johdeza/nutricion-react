{"version":3,"sources":["views/pages/utils/Alertas.js","views/pages/alimentos/Alimentos.js"],"names":["Alertas","props","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","AlertaFormulario","mensaje","AlertaMensajeExito","Alimentos","useState","alimentos","setAlimentos","modal","setModal","categorias","setCategorias","consulta","setConsulta","useEffect","a","axios","get","resultado","data","console","log","obtenerCategoria","alimentoCategoria","aliments","map","item","categoria","aliments_category","name","obtenerAlimentos","details","setDetails","id","cantidad","alimento","setAlimento","handleChange","e","target","value","prevState","editarAlimento","consola","caso","grabar","post","alertas","response","eliminar","eliminarAlimento","error","className","size","color","onClick","items","fields","key","label","_style","width","sorter","filter","columnFilter","tableFilter","footer","itemsPerPageSelect","itemsPerPage","hover","pagination","scopedSlots","index","variant","shape","position","indexOf","newDetails","slice","splice","toggleDetails","includes","show","onClose","closeButton","row","md","htmlFor","xs","onChange","placeholder","custom","i"],"mappings":"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","file":"static/js/37.b4290d5c.chunk.js","sourcesContent":["import Swal from 'sweetalert2';\r\n\r\nconst Alertas = (props) => {\r\n    Swal.fire({\r\n        title: '¿Eliminar Actividad?',\r\n        text: \"Está seguro de eliminar esta Actividad!\",\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: 'Si, eliminar!'\r\n        }).then((result) => {\r\n        if (result.isConfirmed) {\r\n            Swal.fire(\r\n            'Eliminado!',\r\n            'Actividad eliminada correctamente',\r\n            'success'\r\n            )\r\n        }\r\n        })\r\n}\r\n\r\nconst AlertaFormulario=(mensaje)=>{\r\n    Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error...',\r\n        text: mensaje,\r\n      })\r\n}\r\n\r\nconst AlertaMensajeExito = (mensaje)=>{\r\n    Swal.fire({\r\n        icon: 'success',\r\n        title: 'Exito...',\r\n        text: mensaje,\r\n      })\r\n}\r\nexport default {Alertas, AlertaFormulario, AlertaMensajeExito};","import React,{useState, useEffect} from 'react';\r\nimport {\r\n  CSelect,\r\n  CLabel,\r\n  CCard,\r\n  CDataTable,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CButton,  \r\n  CCollapse,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CFormGroup,\r\n  CInput,\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Swal from 'sweetalert2';\r\nimport alertas from '../utils/Alertas';\r\n\r\nconst Alimentos  =()=> {\r\n  \r\n  const [alimentos, setAlimentos] = useState([]);\r\n  const [modal, setModal] = useState(false);\r\n  const [categorias, setCategorias] = useState([]);\r\n  const [consulta, setConsulta] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const obtenerCategoria = async () => {\r\n      try {\r\n        const resultado = await axios.get('http://3.90.64.114/api/v1/web/aliments-categories');\r\n        setCategorias(resultado.data);\r\n        setConsulta(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    obtenerCategoria();\r\n  }, [consulta]);\r\n\r\n  useEffect(() => {\r\n    const obtenerAlimentos = async () => {\r\n      try {\r\n        const resultado = await axios.get('http://3.90.64.114/api/v1/web/aliments');\r\n        const alimentoCategoria = resultado.data.aliments.map(item=>{\r\n            return{\r\n              ...item,\r\n            categoria: item.aliments_category.name\r\n          }\r\n        })\r\n        setAlimentos(alimentoCategoria);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    obtenerAlimentos();\r\n  }, []);\r\n\r\n  const [details, setDetails] = useState([])\r\n\r\n  const toggleDetails = (index) => {\r\n    const position = details.indexOf(index)\r\n    let newDetails = details.slice()\r\n    if (position !== -1) {\r\n      newDetails.splice(position, 1)\r\n    } else {\r\n      newDetails = [...details, index]\r\n    }\r\n    setDetails(newDetails)\r\n  }\r\n\r\n  const fields = [\r\n    { key: 'id', label:'Id', _style: { width: '10%'} },\r\n    { key: 'name', label:'Alimento', _style: { width: '40%'} },\r\n    { key: 'cantidad', label: 'Cantidad' },\r\n    { key: 'categoria', label: 'Categoría' },\r\n    {\r\n      key: 'Opciones',\r\n      label: 'Opciones',\r\n      _style: { width: '1%' },\r\n      sorter: false,\r\n      filter: false\r\n    }\r\n  ]\r\n\r\n  const agregar=()=>\r\n  {\r\n    setAlimento({\r\n      id:'',\r\n      name: '',\r\n      cantidad:'',\r\n      categoria:''\r\n    });\r\n    setModal(!modal);\r\n  }\r\n\r\n  const [alimento, setAlimento] = useState({\r\n    id:'',\r\n    name: '',\r\n    cantidad:'',\r\n    categoria:''\r\n  })\r\n\r\n  const editar=()=>{  \r\n    setModal(!modal)\r\n  }\r\n\r\n   const handleChange= e =>{\r\n    const {name, value} = e.target;\r\n    setAlimento(prevState=>({\r\n      ...prevState,\r\n      [name]: value,\r\n    }))\r\n  }\r\n\r\n  const editarAlimento=(consola, caso)=>{\r\n    console.log(consola);\r\n    setAlimento(consola);\r\n    editar();\r\n  }\r\n\r\n  const grabar=async()=>{\r\n    \r\n    try {\r\n        await axios.post('http://3.90.64.114/api/v1/web/aliments', alimento);\r\n        setConsulta(true);\r\n        alertas.AlertaMensajeExito(\"Alimento ingresado correctamente\");\r\n        setModal(!modal)\r\n    } catch (error) {\r\n      console.log(alertas.AlertaFormulario(error.response.data));\r\n    }\r\n  };\r\n    \r\n   const eliminar = async(id)=>{\r\n    Swal.fire({\r\n      title: '¿Eliminar Alimento?',\r\n      text: \"Está seguro de eliminar este Alimento!\",\r\n      icon: 'warning',\r\n      confirmButtonColor: '#3085d6',\r\n      confirmButtonText: 'Si, eliminar!',\r\n      showCancelButton: true,\r\n      cancelButtonColor: '#d33',\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        eliminarAlimento(id);\r\n        Swal.fire(\r\n          'Eliminado!',\r\n          'Alimento eliminado correctamente',\r\n          'success'\r\n        )\r\n      }\r\n    })\r\n  }\r\n\r\n  const eliminarAlimento = async (id) => {\r\n    try {\r\n      // await axios.put(`http://3.90.64.114/api/v1/web/activities/${id}`);\r\n      // setConsulta(true);\r\n      console.log(alimento);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <>\r\n    <CRow>\r\n        <CCol>\r\n          <CCard>\r\n            <CCardHeader>\r\n              Alimentos\r\n              <CIcon name=\"cilplus\" className=\"mfe-2\" /> \r\n              <CButton size=\"sm\" color=\"primary\" onClick={agregar}>\r\n                Nuevo  \r\n              </CButton>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n            <CDataTable\r\n              items={alimentos}\r\n              fields={fields}\r\n              columnFilter\r\n              tableFilter\r\n              footer\r\n              itemsPerPageSelect\r\n              itemsPerPage={5}\r\n              hover\r\n              sorter\r\n              pagination\r\n              scopedSlots = {{\r\n                'Opciones':\r\n                  (item, index)=>{\r\n                    return (\r\n                      <td className=\"py-2\">\r\n                        <CButton\r\n                          color=\"primary\"\r\n                          variant=\"outline\"\r\n                          shape=\"square\"\r\n                          size=\"sm\"\r\n                          onClick={()=>{toggleDetails(index)}}\r\n                        >\r\n                          {details.includes(index) ? 'Ocultar' : 'Opciones'}\r\n                        </CButton>\r\n                      </td>\r\n                      )\r\n                  },\r\n                'details':\r\n                    (item, index)=>{\r\n                      return (\r\n                      <CCollapse show={details.includes(index)}>\r\n                        <CCardBody>\r\n                          <h4>\r\n                            {item.name}\r\n                          </h4>\r\n                          <p className=\"text-muted\">Categoria: {item.categoria}</p>\r\n                          <p className=\"text-muted\">Id: {item.id}</p>\r\n                          <CButton key={item.id} size=\"sm\" color=\"info\"\r\n                           onClick={()=>editarAlimento(item, 'Editar')}>\r\n                            <CIcon name=\"cil-pencil\" className=\"mfe-2\" /> \r\n                            Editar\r\n                          </CButton>\r\n                          <CButton onClick={()=>eliminar(item.id)}\r\n                          size=\"sm\" color=\"danger\" className=\"ml-1\">\r\n                          <CIcon name=\"cil-trash\" className=\"mfe-2\" /> \r\n                            Eliminar\r\n                          </CButton>\r\n                        </CCardBody>\r\n                      </CCollapse>\r\n                    )\r\n                  }\r\n              }}/>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>      \r\n\r\n      {/* Modal agregar */}\r\n      <CRow>\r\n      <CCol>\r\n        <CCard>\r\n          <CCardBody>\r\n            <CModal \r\n              show={modal} \r\n              onClose={setModal}\r\n            >\r\n              <CModalHeader closeButton>\r\n                <CModalTitle>Alimento</CModalTitle>\r\n              </CModalHeader>\r\n              <CModalBody>\r\n              <CFormGroup>\r\n              <CFormGroup row>\r\n                  <CCol md=\"3\">\r\n                    <CLabel htmlFor=\"disabled-input\">Alimento:</CLabel>\r\n                  </CCol>\r\n                  <CCol xs=\"12\" md=\"9\">\r\n                    <CInput name=\"name\" onChange={handleChange} value={alimento.name} placeholder=\"Alimento\" />\r\n                  </CCol>\r\n                </CFormGroup>\r\n                <CFormGroup row>\r\n                  <CCol md=\"3\">\r\n                    <CLabel htmlFor=\"disabled-input\">Cantidad:</CLabel>\r\n                  </CCol>\r\n                  <CCol xs=\"12\" md=\"9\">\r\n                  <CInput name=\"cantidad\" onChange={handleChange} value={alimento.cantidad} placeholder=\"Cantidad\" />\r\n                    {/* <CInput id=\"cantidad\" value={consolaSeleccionada.nombre} type=\"number\" onChange={handleChange} name=\"cantidad\" placeholder=\"Cantidad\" /> */}\r\n                  </CCol>\r\n                </CFormGroup>\r\n                <CFormGroup row>\r\n                  <CCol md=\"3\">\r\n                    <CLabel htmlFor=\"select\">Categoría:</CLabel>\r\n                  </CCol>\r\n                  <CCol xs=\"12\" md=\"9\">\r\n                    <CSelect custom name=\"categoria\" value={alimento.categoria} id=\"select\" onChange={handleChange}>\r\n                      <option value=\"0\">--Seleccione una Categoría--</option>\r\n                      {categorias.map(i=>(\r\n                        <option key={i.id} value={i.categoria}>{i.name}</option>\r\n                      ))}\r\n                    </CSelect>                    \r\n                  </CCol>\r\n                </CFormGroup>\r\n                </CFormGroup>\r\n              </CModalBody>\r\n              <CModalFooter>                \r\n                <CButton \r\n                  color=\"danger\" \r\n                  onClick={() => setModal(false)}\r\n                >Cancelar</CButton>\r\n                <CButton color=\"primary\" onClick={()=>grabar()}>Grabar</CButton>{' '}\r\n              </CModalFooter>\r\n            </CModal>\r\n            <hr />\r\n\r\n           </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Alimentos;"],"sourceRoot":""}